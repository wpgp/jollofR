library(jollofR)
#devtools::install_github("wpgp/jollofR")
remove.packages("jollofR")
devtools::install_github("wpgp/jollofR")
devtools::install_github("wpgp/jollofR")
library(INLA)
library(jollofR
devtools::install_github("wpgp/jollofR")
#devtools::install_github("wpgp/jollofR")
remove.packages("jollofR")
devtools::install_github("wpgp/jollofR")
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
remove.packages("jollofR")
devtools::install_github("wpgp/jollofR")
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
library(jollofR)
devtools::install_github("wpgp/jollofR")
sprinkle
library(INLA)
library(jollofR)
devtools::install_github("wpgp/jollofR")
remove.packages("jollofR")
devtools::install_github("wpgp/jollofR")
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
sprinkle
library(INLA)
library(jollofR)
library(tidyr) # use install.packages("tidyr") to install, if not available
library(ggplot2) # use install.packages("ggplot2") to install, if not available
library(dplyr)   # use install.packages("dplyr") to install, if not available
library(terra)   # use install.packages("terra") to install, if not available
library(raster)  # use install.packages("raster") to install, if not available
sprinkle
cheesecake
# df = admin_data
age_df <- df %>% dplyr::select(starts_with("age_"))
df = admin_data
path <- "C:/Users/ccn1r22/OneDrive - University of Southampton/Documents/packages/main/jollofR_scripts/paper"
data_path <- paste0(path, "/data/")
output_path <- paste0(path, "/output/")
admin_data <- read.csv(paste0(data_path, "Arrondisement_data.csv"))
grid_data <- readRDS(paste0(data_path, "CMR_grid_data.rds"))
names(grid_data)
grid_data$grd_id <- grid_data$grd
names(admin_data)
table(admin_data$set_typ <- factor(admin_data$set_typ))
df = admin_data
age_df <- df %>% dplyr::select(starts_with("age_"))
pred_dt <- prop_dt <- age_df
pred_dtL <- prop_dtL <- age_df
pred_dtU <- prop_dtU <- age_df
age_classes <- names(age_df)
age_df$total <- apply(age_df, 1, sum)
age_df$total[age_df$total == 0] = NA
age_df$set_typ <- df$set_typ
age_df$pop <- df$total
f_dat <- df %>% dplyr::select(starts_with("fage_"))
fage_classes <- names(f_dat)
mage_classes <- gsub("f", "m", fage_classes)
f.pred_dt <- f.prop_dt <- m.pred_dt <- m.prop_dt <- f_dat
f.pred_dtL <- f.prop_dtL <- m.pred_dtL <- m.prop_dtL <- f_dat
f.pred_dtU <- f.prop_dtU <- m.pred_dtU <- m.prop_dtU <- f_dat
f_dat$ID <- 1:nrow(f_dat)
age_df$ID <- 1:nrow(age_df)
covs <- df %>% dplyr::select(starts_with("x"))
stdize <- function(x) {
stdz <- (x - mean(x, na.rm = T))/sd(x, na.rm = T)
return(stdz)
}
covs <- data.frame(apply(covs, 2, stdize))
cov_names <- names(covs)
age_df <- cbind(age_df, covs)
i = 3
prior.prec <- list(prec = list(prior = "pc.prec", param = c(1,
0.01)))
print(paste(paste0("(", i, ")"), paste0(age_classes[i],
" model is running")))
age_df[, colnames(age_df)[i]] <- round(age_df[, i])
form_age <- as.formula(paste0(colnames(age_df)[i], " ~ 1 + f(ID, model = 'iid', hyper = prior.prec) + f(set_typ, model = 'iid', hyper = prior.prec) +",
paste(cov_names, collapse = " + ")))
if (requireNamespace("INLA", quietly = TRUE)) {
mod_age <- INLA::inla(form_age, data = age_df, family = "binomial",
Ntrials = total, control.predictor = list(link = 1,
compute = TRUE), control.compute = list(dic = TRUE,
cpo = TRUE))
}
summary(mod_age)
output_dir
paste(tempdir(), "/",)
tempdir()
paste0(tempdir(), "/",)
paste0(tempdir(), "/")
paste0(tempdir(), "/", age_classes[i])
parameter_dir <- paste0(tempdir(), "/fixed_and_random_effects")
parameter_dir
paste0(parameter_dir, "/","effects_estimates_for_",age_classes[i],".txt")
cheesecake <- function (df, output_dir)
{
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
message(paste("Directory", output_dir, "created successfully."))
}
else {
message(paste("Directory", output_dir, "already exists."))
}
# df = admin_data
age_df <- df %>% dplyr::select(starts_with("age_"))
pred_dt <- prop_dt <- age_df
pred_dtL <- prop_dtL <- age_df
pred_dtU <- prop_dtU <- age_df
age_classes <- names(age_df)
age_df$total <- apply(age_df, 1, sum)
age_df$total[age_df$total == 0] = NA
age_df$set_typ <- df$set_typ
age_df$pop <- df$total
f_dat <- df %>% dplyr::select(starts_with("fage_"))
fage_classes <- names(f_dat)
mage_classes <- gsub("f", "m", fage_classes)
f.pred_dt <- f.prop_dt <- m.pred_dt <- m.prop_dt <- f_dat
f.pred_dtL <- f.prop_dtL <- m.pred_dtL <- m.prop_dtL <- f_dat
f.pred_dtU <- f.prop_dtU <- m.pred_dtU <- m.prop_dtU <- f_dat
f_dat$ID <- 1:nrow(f_dat)
age_df$ID <- 1:nrow(age_df)
covs <- df %>% dplyr::select(starts_with("x"))
stdize <- function(x) {
stdz <- (x - mean(x, na.rm = T))/sd(x, na.rm = T)
return(stdz)
}
covs <- data.frame(apply(covs, 2, stdize))
cov_names <- names(covs)
age_df <- cbind(age_df, covs)
# create sub-folder for saving fixed and random effect esimates
parameter_dir <- paste0(output_dir, "/fixed_and_random_effects/")
if (!dir.exists(parameter_dir)) {
dir.create(parameter_dir, recursive = TRUE)
message(paste("Directory", parameter_dir, "created successfully."))
}
else {
message(paste("Directory", parameter_dir, "already exists."))
}
for (i in 1:length(age_classes)) {
# i = 3
prior.prec <- list(prec = list(prior = "pc.prec", param = c(1,
0.01)))
print(paste(paste0("(", i, ")"), paste0(age_classes[i],
" model is running")))
age_df[, colnames(age_df)[i]] <- round(age_df[, i])
form_age <- as.formula(paste0(colnames(age_df)[i], " ~ 1 + f(ID, model = 'iid', hyper = prior.prec) + f(set_typ, model = 'iid', hyper = prior.prec) +",
paste(cov_names, collapse = " + ")))
if (requireNamespace("INLA", quietly = TRUE)) {
mod_age <- INLA::inla(form_age, data = age_df, family = "binomial",
Ntrials = total, control.predictor = list(link = 1,
compute = TRUE), control.compute = list(dic = TRUE,
cpo = TRUE))
}
else {
stop("The 'INLA' package is required but not installed. Please install it from https://www.r-inla.org.")
}
capture.output(summary(mod_age), file = paste0(parameter_dir, "/","effects_estimates_for_",age_classes[i],".txt"))
age_classes[i]
parameter_dir <- paste0(tempdir(), "/", age_classes[i])
summary(mod_age)
prop_dt[, i] = round(plogis(mod_age$summary.linear.predictor$mean),
4)
prop_dtL[, i] = round(plogis(mod_age$summary.linear.predictor$"0.025quant"),
4)
prop_dtU[, i] = round(plogis(mod_age$summary.linear.predictor$"0.975quant"),
4)
pred_dt[, i] = round(prop_dt[, i] * age_df$pop)
pred_dtL[, i] = round(prop_dtL[, i] * age_df$pop)
pred_dtU[, i] = round(prop_dtU[, i] * age_df$pop)
f_dat[, colnames(f_dat)[i]] <- round(f_dat[, i])
form_sex <- as.formula(paste0(colnames(f_dat)[i], " ~ ",
"1 +   f(ID, model = 'iid', hyper = prior.prec)"))
if (requireNamespace("INLA", quietly = TRUE)) {
mod_sex <- INLA::inla(form_sex, data = f_dat, family = "binomial",
Ntrials = age_df[, i], control.predictor = list(link = 1,
compute = TRUE), control.compute = list(dic = TRUE,
cpo = TRUE))
}
else {
stop("The 'INLA' package is required but not installed. Please install it from https://www.r-inla.org.")
}
f.prop_dt[, i] = round(plogis(mod_sex$summary.linear.predictor$mean),
4)
m.prop_dt[, i] = 1 - f.prop_dt[, i]
f.prop_dtL[, i] = round(plogis(mod_sex$summary.linear.predictor$"0.025quant"),
4)
m.prop_dtL[, i] = 1 - f.prop_dtL[, i]
f.prop_dtU[, i] = round(plogis(mod_sex$summary.linear.predictor$"0.975quant"),
4)
m.prop_dtU[, i] = 1 - f.prop_dtU[, i]
f.pred_dt[, i] = round(f.prop_dt[, i] * pred_dt[, i])
f.pred_dtL[, i] = round(f.prop_dt[, i] * pred_dtL[, i])
f.pred_dtU[, i] = round(f.prop_dt[, i] * pred_dtU[, i])
m.pred_dt[, i] = pred_dt[, i] - f.pred_dt[, i]
m.pred_dtL[, i] = pred_dtL[, i] - f.pred_dtL[, i]
m.pred_dtU[, i] = pred_dtU[, i] - f.pred_dtU[, i]
}
age_classes_pop = paste0("pp_", age_classes)
colnames(pred_dt) <- age_classes_pop
age_classes_popL = paste0(age_classes_pop, "L")
colnames(pred_dtL) <- age_classes_popL
age_classes_popU = paste0(age_classes_pop, "U")
colnames(pred_dtU) <- age_classes_popU
age_classes_prop = paste0("prp_", age_classes)
colnames(prop_dt) <- age_classes_prop
age_classes_propL = paste0(age_classes_prop, "L")
colnames(prop_dtL) <- age_classes_propL
age_classes_propU = paste0(age_classes_prop, "U")
colnames(prop_dtU) <- age_classes_propU
fage_classes_pop = paste0("pp_", fage_classes)
colnames(f.pred_dt) <- fage_classes_pop
fage_classes_popL = paste0(fage_classes_pop, "L")
colnames(f.pred_dtL) <- fage_classes_popL
fage_classes_popU = paste0(fage_classes_pop, "U")
colnames(f.pred_dtU) <- fage_classes_popU
fage_classes_prop = paste0("prp_", fage_classes)
colnames(f.prop_dt) <- fage_classes_prop
fage_classes_propL = paste0(fage_classes_prop, "L")
colnames(f.prop_dtL) <- fage_classes_propL
fage_classes_propU = paste0(fage_classes_prop, "U")
colnames(f.prop_dtU) <- fage_classes_propU
mage_classes_pop = paste0("pp_", mage_classes)
colnames(m.pred_dt) <- mage_classes_pop
mage_classes_popL = paste0(mage_classes_pop, "L")
colnames(m.pred_dtL) <- mage_classes_popL
mage_classes_popU = paste0(mage_classes_pop, "U")
colnames(m.pred_dtU) <- mage_classes_popU
mage_classes_prop = paste0("prp_", mage_classes)
colnames(m.prop_dt) <- mage_classes_prop
mage_classes_propL = paste0(mage_classes_prop, "L")
colnames(m.prop_dtL) <- mage_classes_propL
mage_classes_propU = paste0(mage_classes_prop, "U")
colnames(m.prop_dtU) <- mage_classes_propU
all_pop <- f.pred_dt + m.pred_dt
all_pop$total <- apply(all_pop, 1, sum)
png(paste0(output_dir, "/model_validation_scatter_plot.png"))
plot(all_pop$total, df$total, xlab = "Observed population",
ylab = "Predicted population", main = "Scatter plot of \n observed versus predicted")
abline(0, 1, col = 2, lwd = 2)
dev.off()
residual = all_pop$total - df$total
print(mets <- t(c(MAE = mean(abs(residual), na.rm = T), MAPE = (1/length(df$total)) *
sum(abs((df$total - all_pop$total)/df$total)) * 100,
RMSE = sqrt(mean(residual^2, na.rm = T)), corr = cor(df$total[!is.na(df$total)],
all_pop$total[!is.na(df$total)]))))
write.csv(t(mets), paste0(output_dir, "/fit_metrics.csv"),
row.names = F)
full_dat <- cbind(df, pred_dt, pred_dtL, pred_dtU, prop_dt,
prop_dtL, prop_dtU, f.pred_dt, f.pred_dtL, f.pred_dtU,
f.prop_dt, m.prop_dt, m.pred_dt, m.pred_dtL, m.pred_dtU)
write.csv(full_dat, paste0(output_dir, "/full_disaggregated_data.csv"),
row.names = F)
write.csv(pred_dt, paste0(output_dir, "/age_disaggregated_data.csv"),
row.names = F)
write.csv(f.pred_dt, paste0(output_dir, "/female_disaggregated_data.csv"),
row.names = F)
write.csv(m.pred_dt, paste0(output_dir, "/male_disaggregated_data.csv"),
row.names = F)
write.csv(f.prop_dt, paste0(output_dir, "/female_proportions.csv"),
row.names = F)
write.csv(m.prop_dt, paste0(output_dir, "/male_proportions.csv"),
row.names = F)
write.csv(prop_dt, paste0(output_dir, "/age_proportions.csv"),
row.names = F)
return(out <- list(age_pop = pred_dt, age_popL = pred_dtL,
age_popU = pred_dtU, age_prop = prop_dt, fem_age_pop = f.pred_dt,
fem_age_prop = f.prop_dt, male_age_pop = m.pred_dt, male_age_prop = m.prop_dt,
full_data = full_dat))
}
admin_data$set_typ <- factor(admin_data$settlement_name)
result <- cheesecake(df = admin_data, output_dir = tempdir())
paste0(output_dir, "/fixed_and_random_effects/",age_classes[i])
output_dir = tempdir()
parameter_dir <- paste0(output_dir, "/fixed_and_random_effects/",age_classes[i])
parameter_dir
paste0(parameter_dir, "/posterior_estimates.txt")
cheesecake <- function (df, output_dir)
{
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
message(paste("Directory", output_dir, "created successfully."))
}
else {
message(paste("Directory", output_dir, "already exists."))
}
# df = admin_data
age_df <- df %>% dplyr::select(starts_with("age_"))
pred_dt <- prop_dt <- age_df
pred_dtL <- prop_dtL <- age_df
pred_dtU <- prop_dtU <- age_df
age_classes <- names(age_df)
age_df$total <- apply(age_df, 1, sum)
age_df$total[age_df$total == 0] = NA
age_df$set_typ <- df$set_typ
age_df$pop <- df$total
f_dat <- df %>% dplyr::select(starts_with("fage_"))
fage_classes <- names(f_dat)
mage_classes <- gsub("f", "m", fage_classes)
f.pred_dt <- f.prop_dt <- m.pred_dt <- m.prop_dt <- f_dat
f.pred_dtL <- f.prop_dtL <- m.pred_dtL <- m.prop_dtL <- f_dat
f.pred_dtU <- f.prop_dtU <- m.pred_dtU <- m.prop_dtU <- f_dat
f_dat$ID <- 1:nrow(f_dat)
age_df$ID <- 1:nrow(age_df)
covs <- df %>% dplyr::select(starts_with("x"))
stdize <- function(x) {
stdz <- (x - mean(x, na.rm = T))/sd(x, na.rm = T)
return(stdz)
}
covs <- data.frame(apply(covs, 2, stdize))
cov_names <- names(covs)
age_df <- cbind(age_df, covs)
# create sub-folder for saving fixed and random effect esimates
for (i in 1:length(age_classes)) {
# i = 3
prior.prec <- list(prec = list(prior = "pc.prec", param = c(1,
0.01)))
print(paste(paste0("(", i, ")"), paste0(age_classes[i],
" model is running")))
age_df[, colnames(age_df)[i]] <- round(age_df[, i])
form_age <- as.formula(paste0(colnames(age_df)[i], " ~ 1 + f(ID, model = 'iid', hyper = prior.prec) + f(set_typ, model = 'iid', hyper = prior.prec) +",
paste(cov_names, collapse = " + ")))
if (requireNamespace("INLA", quietly = TRUE)) {
mod_age <- INLA::inla(form_age, data = age_df, family = "binomial",
Ntrials = total, control.predictor = list(link = 1,
compute = TRUE), control.compute = list(dic = TRUE,
cpo = TRUE))
}
else {
stop("The 'INLA' package is required but not installed. Please install it from https://www.r-inla.org.")
}
#  output_dir = tempdir()
parameter_dir <- paste0(output_dir, "/fixed_and_random_effects/",age_classes[i])
if (!dir.exists(parameter_dir)) {
dir.create(parameter_dir, recursive = TRUE)
message(paste("Directory", parameter_dir, "created successfully."))
}
else {
message(paste("Directory", parameter_dir, "already exists."))
}
capture.output(summary(mod_age), file = paste0(parameter_dir, "/posterior_estimates.txt"))
age_classes[i]
parameter_dir <- paste0(tempdir(), "/", age_classes[i])
summary(mod_age)
prop_dt[, i] = round(plogis(mod_age$summary.linear.predictor$mean),
4)
prop_dtL[, i] = round(plogis(mod_age$summary.linear.predictor$"0.025quant"),
4)
prop_dtU[, i] = round(plogis(mod_age$summary.linear.predictor$"0.975quant"),
4)
pred_dt[, i] = round(prop_dt[, i] * age_df$pop)
pred_dtL[, i] = round(prop_dtL[, i] * age_df$pop)
pred_dtU[, i] = round(prop_dtU[, i] * age_df$pop)
f_dat[, colnames(f_dat)[i]] <- round(f_dat[, i])
form_sex <- as.formula(paste0(colnames(f_dat)[i], " ~ ",
"1 +   f(ID, model = 'iid', hyper = prior.prec)"))
if (requireNamespace("INLA", quietly = TRUE)) {
mod_sex <- INLA::inla(form_sex, data = f_dat, family = "binomial",
Ntrials = age_df[, i], control.predictor = list(link = 1,
compute = TRUE), control.compute = list(dic = TRUE,
cpo = TRUE))
}
else {
stop("The 'INLA' package is required but not installed. Please install it from https://www.r-inla.org.")
}
f.prop_dt[, i] = round(plogis(mod_sex$summary.linear.predictor$mean),
4)
m.prop_dt[, i] = 1 - f.prop_dt[, i]
f.prop_dtL[, i] = round(plogis(mod_sex$summary.linear.predictor$"0.025quant"),
4)
m.prop_dtL[, i] = 1 - f.prop_dtL[, i]
f.prop_dtU[, i] = round(plogis(mod_sex$summary.linear.predictor$"0.975quant"),
4)
m.prop_dtU[, i] = 1 - f.prop_dtU[, i]
f.pred_dt[, i] = round(f.prop_dt[, i] * pred_dt[, i])
f.pred_dtL[, i] = round(f.prop_dt[, i] * pred_dtL[, i])
f.pred_dtU[, i] = round(f.prop_dt[, i] * pred_dtU[, i])
m.pred_dt[, i] = pred_dt[, i] - f.pred_dt[, i]
m.pred_dtL[, i] = pred_dtL[, i] - f.pred_dtL[, i]
m.pred_dtU[, i] = pred_dtU[, i] - f.pred_dtU[, i]
}
age_classes_pop = paste0("pp_", age_classes)
colnames(pred_dt) <- age_classes_pop
age_classes_popL = paste0(age_classes_pop, "L")
colnames(pred_dtL) <- age_classes_popL
age_classes_popU = paste0(age_classes_pop, "U")
colnames(pred_dtU) <- age_classes_popU
age_classes_prop = paste0("prp_", age_classes)
colnames(prop_dt) <- age_classes_prop
age_classes_propL = paste0(age_classes_prop, "L")
colnames(prop_dtL) <- age_classes_propL
age_classes_propU = paste0(age_classes_prop, "U")
colnames(prop_dtU) <- age_classes_propU
fage_classes_pop = paste0("pp_", fage_classes)
colnames(f.pred_dt) <- fage_classes_pop
fage_classes_popL = paste0(fage_classes_pop, "L")
colnames(f.pred_dtL) <- fage_classes_popL
fage_classes_popU = paste0(fage_classes_pop, "U")
colnames(f.pred_dtU) <- fage_classes_popU
fage_classes_prop = paste0("prp_", fage_classes)
colnames(f.prop_dt) <- fage_classes_prop
fage_classes_propL = paste0(fage_classes_prop, "L")
colnames(f.prop_dtL) <- fage_classes_propL
fage_classes_propU = paste0(fage_classes_prop, "U")
colnames(f.prop_dtU) <- fage_classes_propU
mage_classes_pop = paste0("pp_", mage_classes)
colnames(m.pred_dt) <- mage_classes_pop
mage_classes_popL = paste0(mage_classes_pop, "L")
colnames(m.pred_dtL) <- mage_classes_popL
mage_classes_popU = paste0(mage_classes_pop, "U")
colnames(m.pred_dtU) <- mage_classes_popU
mage_classes_prop = paste0("prp_", mage_classes)
colnames(m.prop_dt) <- mage_classes_prop
mage_classes_propL = paste0(mage_classes_prop, "L")
colnames(m.prop_dtL) <- mage_classes_propL
mage_classes_propU = paste0(mage_classes_prop, "U")
colnames(m.prop_dtU) <- mage_classes_propU
all_pop <- f.pred_dt + m.pred_dt
all_pop$total <- apply(all_pop, 1, sum)
png(paste0(output_dir, "/model_validation_scatter_plot.png"))
plot(all_pop$total, df$total, xlab = "Observed population",
ylab = "Predicted population", main = "Scatter plot of \n observed versus predicted")
abline(0, 1, col = 2, lwd = 2)
dev.off()
residual = all_pop$total - df$total
print(mets <- t(c(MAE = mean(abs(residual), na.rm = T), MAPE = (1/length(df$total)) *
sum(abs((df$total - all_pop$total)/df$total)) * 100,
RMSE = sqrt(mean(residual^2, na.rm = T)), corr = cor(df$total[!is.na(df$total)],
all_pop$total[!is.na(df$total)]))))
write.csv(t(mets), paste0(output_dir, "/fit_metrics.csv"),
row.names = F)
full_dat <- cbind(df, pred_dt, pred_dtL, pred_dtU, prop_dt,
prop_dtL, prop_dtU, f.pred_dt, f.pred_dtL, f.pred_dtU,
f.prop_dt, m.prop_dt, m.pred_dt, m.pred_dtL, m.pred_dtU)
write.csv(full_dat, paste0(output_dir, "/full_disaggregated_data.csv"),
row.names = F)
write.csv(pred_dt, paste0(output_dir, "/age_disaggregated_data.csv"),
row.names = F)
write.csv(f.pred_dt, paste0(output_dir, "/female_disaggregated_data.csv"),
row.names = F)
write.csv(m.pred_dt, paste0(output_dir, "/male_disaggregated_data.csv"),
row.names = F)
write.csv(f.prop_dt, paste0(output_dir, "/female_proportions.csv"),
row.names = F)
write.csv(m.prop_dt, paste0(output_dir, "/male_proportions.csv"),
row.names = F)
write.csv(prop_dt, paste0(output_dir, "/age_proportions.csv"),
row.names = F)
return(out <- list(age_pop = pred_dt, age_popL = pred_dtL,
age_popU = pred_dtU, age_prop = prop_dt, fem_age_pop = f.pred_dt,
fem_age_prop = f.prop_dt, male_age_pop = m.pred_dt, male_age_prop = m.prop_dt,
full_data = full_dat))
}
result <- cheesecake(df = admin_data, output_dir = tempdir())
dtf <- data.frame(pred=apply(result$age_pop, 1, sum), obs=result$full_data$total)
plot(dtf$obs, dtf$pred)
result <- cheesecake(df = admin_data, output_dir = output_path)
dtf <- data.frame(pred=apply(result$age_pop, 1, sum), obs=result$full_data$total)
plot(dtf$obs, dtf$pred)
pyramid(result$fem_age_pop,result$male_age_pop)
path <- "C:/Users/ccn1r22/OneDrive - University of Southampton/Documents/packages/main/jollofR_scripts/paper"
data_path <- paste0(path, "/data/")
output_path <- paste0(path, "/output/")
admin_data <- read.csv(paste0(data_path, "Arrondisement_data.csv"))
grid_data <- readRDS(paste0(data_path, "CMR_grid_data.rds"))
names(grid_data)
grid_data$grd_id <- grid_data$grd
names(admin_data)
table(admin_data$set_typ <- factor(admin_data$set_typ))
# cheesepop & cheesecake
result <- cheesecake(df = admin_data, output_dir = tempdir())
admin_data
# cheesepop & cheesecake
admin_data2 <- admin_data
admin_data2$fage_5_9
admin_data2$fage_5_9 <- admin_data2$mage_5_9 <- admin_data2$age_5_9 <- NA
admin_data2$fage_5_9
resulta <- cheesecake(df = admin_data, output_dir = tempdir())
resultb <- cheesecake(df = admin_data2, output_dir = tempdir())
