f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid")
mod04c <-inla(form04c, #the formula
data=data.frame(dat),  #the data stack
family= 'exponential.surv',   #which family the data comes from
control.predictor=list(compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
##
DIC01 <- t(c(mod1 = mod01$dic$dic,
mod2 = mod02$dic$dic,
mod3 = mod03$dic$dic,
mod4 = mod04$dic$dic))
DIC01b <- t(c(mod1 = mod01b$dic$dic,
mod2 = mod02b$dic$dic,
mod3 = mod03b$dic$dic,
mod4 = mod04b$dic$dic))
DIC01c <- t(c(mod1 = mod01c$dic$dic,
mod2 = mod02c$dic$dic,
mod3 = mod03c$dic$dic,
mod4 = mod04c$dic$dic))
rbind(DIC01, DIC01b, DIC01c)
coords.surv <- cbind(dat$lon, dat$lat)
bnd.surv <- inla.nonconvex.hull(coords.surv, -0.035, -0.05, resolution = c(100, 100))
mesh.surv <- inla.mesh.2d(boundary = bnd.surv, max.edge=c(0.5,1),
offset = c(0.5, 1),
cutoff = 0.3)
#png(paste0(results_path, "/plots/mesh.png"))
plot(mesh.surv) #--plot to
plot(shp2, add=T, col= "grey")
points(coords.surv, cex=0.6, col="red", pch=16)
#dev.off()
mesh.surv$n # Number of mesh nodes = 1406
###---Build projector matrix A
A.surv<-inla.spde.make.A(mesh=mesh.surv,
loc=as.matrix(coords.surv));dim(A.surv)
##---Create the SPDE
spde.surv <- inla.spde2.matern(mesh.surv, alpha=2)
iset.surv <- inla.spde.make.index(name = "s", spde.surv$n.spde)
names(dat)
covs.surv2 <- dat[,c("x1", "x2", "x3", "x4", "x5", "x6","country", "efi","weight",
"set_typ","year", "mstatus", "edu", "wealth", "status", "cluster")]
# Build the stack
stk_est.surv2 <- inla.stack(data=list(y=dat$fg_cut), #the response
A=list(A.surv,1),  #the A matrix; the 1 is included to make the list(covariates)
effects=list(c(list(Intercept=1), #the Intercept
iset.surv),  #the spatial index
#the covariates
list(covs.surv2)),
#this is a quick name so you can call upon easily
tag='est')
# individual characteristics only ----------------------------------
# Model 11
form11 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod11 <-inla(form11, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'lognormal.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
lapply(mod11$marginals.fixed, function(X){inla.pmarginal(0, X)})# posterior prbability of the effects being less than 0
summary(mod11)
fixed11 <- round(mod11$summary.fixed,4) # to 4 dps
fixed11
# Model 12
form12 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod12 <-inla(form12, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'weibull.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
#lapply(mod12$marginals.fixed, function(X){inla.pmarginal(0, X)})# posterior prbability of the effects being less than 0
#summary(mod12)
#fixed12 <- round(mod12$summary.fixed,4) # to 4 dps
#fixed12
# Model 13
form13 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod13 <-inla(form13, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'gamma.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 14
form14 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod14 <-inla(form14, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'exponential.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
#lapply(mod13$marginals.fixed, function(X){inla.pmarginal(0, X)})# posterior prbability of the effects being less than 0
#summary(mod13)
#fixed13 <- round(mod13$summary.fixed,4) # to 4 dps
#fixed13
#        mod11    mod12    mod13 # mod11 has the best fit mets
#[1,] 86056.39 88327.44 87161.83
#[2,] 86042.65 88566.55 87295.36
# environmential charecteristics only --------------------------
# Model 21
form21 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodies
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod21 <-inla(form21, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'lognormal.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
summary(mod21)
# Model 22
form22 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodies
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod22 <-inla(form22, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'weibull.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 23
form23 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodies
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod23 <-inla(form23, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'gamma.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 24
form24 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodies
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod24 <-inla(form24, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'exponential.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# ----- Individual + Environmental covariates (full model)-----------------------
# Model 31
form31 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodi
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
#mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod31 <-inla(form31, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'lognormal.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 32
form32 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodi
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod32 <-inla(form32, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'weibull.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 33
form33 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodi
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
#mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod33 <-inla(form33, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'gamma.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
# Model 34
form34 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodi
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod34 <-inla(form34, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'exponential.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
#lapply(mod21$marginals.fixed, function(X){inla.pmarginal(0, X)})# posterior prbability of the effects being less than 0
#summary(mod21)
##fixed21 <- round(mod21$summary.fixed,4) # to 4 dps
#fixed21
summary(mod34)
# Model 33
form33 <- inla.surv(dat$time2, y) ~ -1+ Intercept +
x1 + # night time lights
x2 + # distance to water bodi
x3 + # temperature
x5 + # access to health facilities - walking
x6 + # access to health facilities - motorised
#mstatus +  #marital status was dropped as it has very high statnadard deviation
edu  +
wealth +
status  +
f(efi, model="iid") +
f(weight, model="iid") +
f(year, model="iid") +
f(country, model="iid") +
f(cluster, model="iid") +
f(set_typ, model="iid") +
f(s, model=spde.surv)
mod33 <-inla(form33, #the formula
data=inla.stack.data(stk_est.surv2,spde=spde.surv),  #the data stack
family= 'gamma.surv',   #which family the data comes from
control.predictor=list(A=inla.stack.A(stk_est.surv2),compute=TRUE),  #compute gives you the marginals of the linear predictor
control.compute = list(dic = TRUE, waic = TRUE, cpo=TRUE,config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
verbose = FALSE)
summary(mod33)
path <- "C:/Users/ccn1r22/OneDrive - University of Southampton/Documents/packages/main/jollofR_scripts/paper"
data_path <- paste0(path, "/data/")
output_path <- paste0(path, "/output/")
admin_data <- read.csv(paste0(data_path, "Arrondisement_data.csv"))
grid_data <- readRDS(paste0(data_path, "CMR_grid_data.rds"))
names(grid_data)
grid_data$grd_id <- grid_data$grd
names(admin_data)
toydata
library(jollofR)
toydata
DIC1 <- t(c(mod1 = mod11$dic$dic,
mod2 = mod12$dic$dic,
mod3 = mod13$dic$dic,
mod4 = mod14$dic$dic))
DIC2 <- t(c(mod1 = mod21$dic$dic,
mod2 = mod22$dic$dic,
mod3 = mod23$dic$dic,
mod4 = mod24$dic$dic))
DIC3 <- t(c(mod1 = mod31$dic$dic,
mod2 = mod32$dic$dic,
mod3 = mod33$dic$dic,
mod4 = mod34$dic$dic))
rbind(DIC1, DIC2, DIC3)
#    mod1     mod2     mod3     mod4
# 84913.52 87197.71 85956.44 91568.35
# 88980.72 91216.40 90161.34 94821.32
# 84934.66 87192.66 85981.08 91561.56
summary(mod31)
#    mod1     mod2     mod3     mod4
# 84913.52 87197.71 85956.44 91568.35
# 88980.72 91216.40 90161.34 94821.32
# 84934.66 87192.66 85981.08 91561.56
summary(mod21)
nsp_fixed <- round(mod01c$summary.fixed,4) # to 4 dps for non-spatial Lognormal
sp_fixed <- round(mod31$summary.fixed,4) # to 4 dps for spatial Lognormal
data.frame(effects = rownames(fixed01),
nsp = fixed01$mean, sp = fixed11$mean,
effects2 = rownames(fixed11))
# Run posterior simulation and grid prediction simultaneously
simCom <- function(model1, dat, Aprediction1,run)
{
fixedeff1  <- time_hat <-  matrix(0,nrow=nrow(dat), ncol = run)
inla.seed = as.integer(runif(1)*.Machine$integer.max)
inla.seed =   58892
#set.seed(inla.seed)
print(inla.seed)
# Obtain posterior samples of the Betas
m1.samp1 <- inla.posterior.sample(run,
model1, seed = inla.seed ,
selection=list(x1=1,
x2=1,
x3=1,
x5=1,
x6=1
),
num.threads="1:1")
#Extract the spatial random effects at the mesh nodes
sfield_nodes_mean1 <- model1$summary.random$s['mean']
field_mean1 <- (Aprediction1%*% as.data.frame(sfield_nodes_mean1)[, 1])
for(i in 1:run)
{
# i = 2
fixedeff1[,i] <-
model1$summary.fixed['Intercept', 'mean'] +
m1.samp1[[i]]$latent[1,] * dat[,'x1'] +
m1.samp1[[i]]$latent[2,] * dat[,'x2'] +
m1.samp1[[i]]$latent[3,] * dat[,'x3'] +
m1.samp1[[i]]$latent[4,] * dat[,'x5'] +
m1.samp1[[i]]$latent[5,] * dat[,'x6'] +
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[2]) + # efi
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[3]) + # weight
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[4]) + # year
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[5]) + # country
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[6]) + # cluster
rnorm(nrow(dat), 0, 1/model1$summary.hyperpar$mean[7]) + # settlement type
field_mean1[,1]
time_hat[,i]<- fixedeff1[,i] # time to cut
}
dat$mean_time_hat <- apply(time_hat, 1, mean, na.rm=T) #
dat$lower_time_hat <- apply(time_hat, 1, quantile, probs=c(0.025), na.rm=T) #
dat$upper_time_hat <- apply(time_hat, 1, quantile, probs=c(0.975), na.rm=T) #
dat$sd_time_hat <- apply(time_hat, 1, sd, na.rm=T) #
dat$cv_time_hat <- dat$sd_time_hat/dat$mean_time_hat
output <- list(time_hat = time_hat,
est_data = dat)
}
run = 100
#
dim(pred_covs <- as.data.frame(pred_covs))
# - Predict survival times across grid cells-------------------
#   prediction at grid cwll levels
pred_covs <- readRDS(paste0(data_path, "/binded_covariates_df.RDS"))
rm(list=ls())
packages <- c("raster", "haven", "sf","sp", "tmap","tidyverse","tmaptools",
"lattice","survival", "parallel", "gridExtra", "devtools", "rlang",
"tidyr", "dplyr", "survminer", "spData", "ceramic", "basemaps",
"ggmap")
if(length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages()))) }
pred_covs <- readRDS(paste0(data_path, "/binded_covariates_df.RDS"))
pred_covs <- readRDS(paste0(data_path, "/binded_covariates_df.RDS"))
# Set paths
path <- "C:/Users/ccn1r22/OneDrive - University of Southampton/Documents/Desktop/Miscellaneous/GeoSTAM"
data_path <- paste0(path, "/Data")
out_path <- paste0(path, "/output")
# Read in the data
dim(dat <- readRDS(paste0(data_path,'/binded_countries_unfpa.rds')))
dim(shp_all <- st_read(paste0(data_path,'/binded_countries_admin_1.gpkg')))
dim(covs_all <- readRDS(paste0(data_path, "/binded_covariates_df.RDS")))
pred_covs <- readRDS(paste0(data_path, "/binded_covariates_df.RDS"))
dim(pred_covs)
head(pred_covs)
names(pred_covs) <- c("x3", "x2", "x1", "x5", "x6", "settlements_typo", "lon", "lat")
# checks for NAs
sapply(pred_covs[,c("x3", "x2", "x1", "x5", "x6")], function(x) length(x[is.na(x)]))
# apply scaling
pred_covs[,c("x3", "x2", "x1", "x5", "x6")] <- apply(pred_covs[,c("x3", "x2", "x1", "x5", "x6")],2, stdize)
rm(list=ls())
packages <- c("raster", "haven", "sf","sp", "tmap","tidyverse","tmaptools",
"lattice","survival", "parallel", "gridExtra", "devtools", "rlang",
"tidyr", "dplyr", "survminer", "spData", "ceramic", "basemaps",
"ggmap")
if(length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages()))) }
rm(list=ls())
packages <- c("raster", "haven", "sf","sp", "tmap","tidyverse","tmaptools",
"lattice","survival", "parallel", "gridExtra", "devtools", "rlang",
"tidyr", "dplyr", "survminer", "spData", "ceramic", "basemaps",
"ggmap")
if(length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages()))) }
rm(list=ls())
packages <- c("raster", "haven","sp", "tmap","tidyverse","tmaptools",
"lattice","survival", "parallel", "gridExtra", "devtools", "rlang",
"tidyr", "dplyr", "survminer", "spData", "ceramic", "basemaps",
"ggmap")
if(length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages()))) }
#Instal INLA
if(length(setdiff("INLA", rownames(installed.packages()))) > 0){
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
}
library(INLA)
library(sf)
install.packages("sf")
rm(list=ls())
packages <- c("raster", "haven", "sf","sp", "tmap","tidyverse","tmaptools",
"lattice","survival", "parallel", "gridExtra", "devtools", "rlang",
"tidyr", "dplyr", "survminer", "spData", "ceramic", "basemaps",
"ggmap")
if(length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages()))) }
library(INLA)
library(INLA)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
